<?php
/**
 * @file
 * Code for the Faker module.
 */

/**
 * Implements hook_libraries_info().
 */
function faker_libraries_info() {
  $libraries['faker'] = array(
    'name' => 'Faker',
    'vendor url' => 'https://github.com/fzaninotto/Faker',
    'download url' => 'https://github.com/fzaninotto/Faker/archive/v1.1.0.tar.gz',
    // The actual library files are contained in 'sites/all/libraries/faker/src'
    'path' => 'src',
    'files' => array(
      'php' => array(
        'autoload.php',
      ),
    ),
    'version' => '1.1',
  );

  return $libraries;
}

/**
 * Implements hook_hook_info().
 */
function faker_hook_info() {
  // Allow faker hooks to be defined in modulename.faker.inc.
  $hooks['faker_alter'] = array('group' => 'faker');
  $hooks['faker_node_generate'] = array('group' => 'faker');
  return $hooks;
}

/**
 * Factory for creating a Faker\Generator instance.  Invokes hook_faker_alter()
 * to allow modules to add providers to the Faker instance.
 */
function faker_create() {
  $lib = libraries_load('faker');

  $faker = Faker\Factory::create();
  drupal_alter('faker', $faker);

  return $faker;
}

/**
 * Implements hook_node_presave().
 */
function faker_node_presave($node) {
  if (!empty($node->devel_generate)) {
    $faker = faker_create();
    module_invoke_all('faker_node_generate', $node, $faker);
  }
}

/**
 * Implements hook_user_presave().
 */
function faker_user_presave(&$user) {
  if (!empty($user['devel_generate'])) {
    $faker = faker_create();
    $user['name'] = $faker->name;
  }
}


/**
 * Alter a node object that has generated by devel_generate, but before it is
 * saved.  This hook itself is called from hook_node_presave, so anything that
 * can be done to the node object in that hook can also be done here.
 */
function faker_faker_node_generate($node, $faker) {
  if ($node->type == 'article') {
    $node->title = $faker->text(25);

    // Generate an opening paragraph, followed by a 2-4 sections comprised of
    // a heading followed by 1-3 paragraphs, each with 5-10 sentences.
    $body = '<p>' . $faker->paragraph(3,5) .'</p>';
    for ($i = 0; $i < rand(2,4); $i++) {
      $body .= '<h3>' . $faker->sentence . '</h3>';
      for ($j = 0; $j < rand(1,3); $j++) {
        $body .= '<p>' . $faker->paragraph(rand(5,10)) . '</p>';
      }
    }
    $node->body['und'][0]['value'] = $body;
    $node->body['und'][0]['format'] = 'full_html';
    $node->field_tags['und'] = faker_create_terms($faker, 1);
  }
}

function faker_create_terms($faker, $number) {
  $terms = array();
  $words = $faker->words($number);
  $options = array(
    'cool',
    'cat',
    'love',
    'drupal'
  );
  $words = array($options[array_rand($options)]);
  foreach ($words as $word) {
    $term = NULL;
    $term_options = taxonomy_get_term_by_name($word);
    if (count($term_options) > 0) {
      $term = reset($term_options);
    }
    if (empty($term) || empty($term->tid)) {
      $term = new stdClass();
      $term->name = $word;
      $term->description = $faker->paragraph(3,5);
      // Use the first available text format.
      $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
      $term->vid = 5; // Tags
      taxonomy_term_save($term);
    }
    $terms[] = array(
      'tid' => $term->tid,
      'vid' => $term->vid,
      'name' => $term->name,
      'vocabulary_machine_name' => 'tags',
    );
  }
  return $terms;
}
